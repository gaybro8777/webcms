# Unlike the feature branch pipeline (see feature.yml), this pipeline updates infrastructure
# and deploys new code to the environment specified in WEBCMS_ENVIRONMENT.

env:
  # Ensure all jobs use these values from the agent environment
  WEBCMS_ENVIRONMENT: ${WEBCMS_ENVIRONMENT}
  WEBCMS_WORKSPACE: ${WEBCMS_WORKSPACE}

  # Common image tag used across steps
  WEBCMS_IMAGE_TAG: $BUILDKITE_BRANCH-$BUILDKITE_BUILD_NUMBER

  # Base URL for image repositories
  WEBCMS_REPO_URL: 316981092358.dkr.ecr.us-east-1.amazonaws.com

steps:
  - label: ":docker: Build images"
    command: bash .buildkite/docker-build.sh
    key: build-$WEBCMS_ENVIRONMENT

    # Limit build concurrency to 1 per branch: this throttles overlapping builds
    concurrency_group: epa-webcms-d8/build-$BUILDKITE_BRANCH
    concurrency: 1

    plugins:
      # Assume cross-account build role
      - cultureamp/aws-assume-role#28c5ceccb0d5cbef2c592a57579fd4c6a2869bd7:
          role: arn:aws:iam::316981092358:role/BuildkiteRoleForImageBuilds

      # Log in to ECR repositories
      # NB. This is not the latest version of the plugin, but we have to downgrade in order
      # to play nice with aws-assume-role.
      - ecr#v1.2.0:
          login: true
          no-include-email: true

  - label: ":terraform: Apply"
    key: apply-$WEBCMS_ENVIRONMENT

    # Only allow one Terraform run at a time, regardless of branch. Terraform takes out a
    # lock during plans or applies, so this avoids contention with feature branch builds.
    concurrency_group: epa-webcms-d8/terraform
    concurrency: 1

    plugins:
      # Assume the Terraform role, using a 30-minute window to reduce the amount of time
      # spent with these administrative credentials.
      - cultureamp/aws-assume-role#28c5ceccb0d5cbef2c592a57579fd4c6a2869bd7:
          role: arn:aws:iam::316981092358:role/BuildkiteRoleForTerraform
          duration: 1800

      # Download Terraform configuration (backend config and tfvars files) from Parameter
      # Store
      - ./.buildkite/plugins/aws-parameters: {}

      # Perform the actual Terraform run
      - docker#v3.5.0:
          image: hashicorp/terraform:0.12.24
          entrypoint: /bin/sh
          command:
            - -ec
            # Script steps:
            # 1. In the terraform directory, initialize the plugins
            # 2. Select the current workspace
            # 3. Generate a Terraform plan file - this step acts as a changelog of sorts
            #    for what happened to this environment's infrastructure.
            # 4. Apply the plan
            # 5. Capture the up-to-date Drush VPC configuration, which is needed by the
            #    Drush step below in order to spawn a Fargate build task.
            - |
              cd infrastructure/terraform

              terraform init -input=false -backend-config=backend.config
              terraform workspace select "$WEBCMS_WORKSPACE"

              terraform plan \
                -input=false \
                -var image-tag-drupal="$WEBCMS_IMAGE_TAG" \
                -var image-tag-drush="$WEBCMS_IMAGE_TAG" \
                -var image-tag-nginx="$WEBCMS_IMAGE_TAG" \
                -out plan

              terraform apply -input=false plan

              terraform
          environment:
            # Forward build variables
            - WEBCMS_IMAGE_TAG
            - WEBCMS_WORKSPACE

            # Forward STS-assumed credentials
            - AWS_ACCESS_KEY_ID
            - AWS_SECRET_ACCESS_KEY
            - AWS_SESSION_TOKEN

      - artifacts#v1.3.0:
          upload:
            - from: infrastructure/terraform/drushvpc.json
              to: drushvpc-$WEBCMS_ENVIRONMENT.json

  - label: ":ecs: Run Drush updates"
    command: bash .buildkite/run-drush.sh

    # Run only if the previous steps succeeded
    depends_on:
      - build-$WEBCMS_ENVIRONMENT
      - apply-$WEBCMS_ENVIRONMENT

    # Only allow one Drush update at a time per environment. This allows us to
    # concurrently run Drush against both staging and the Spanish test environment at the
    # same time.
    concurrency_group: epa-webcms-d8/update-$WEBCMS_ENVIRONMENT
    concurrency: 1

    plugins:
      # Download the VPC configuration to the filename expected by run-drush.sh
      - artifacts#v1.3.0:
          download:
            - from: drushvpc-$WEBCMS_ENVIRONMENT.json
              to: drushvpc.json

      # Assume our ECS task management role
      - cultureamp/aws-assume-role#28c5ceccb0d5cbef2c592a57579fd4c6a2869bd7:
          role: arn:aws:iam::316981092358:role/BuildkiteRoleForECSTasks
