server {
  server_name _;

  listen 80 default_server;

  root /var/www/html/web;

  index index.php index.html;
  add_header X-Frame-Options SAMEORIGIN;
  add_header X-XSS-Protection "1";
  add_header Feature-Policy "geolocation 'none';midi 'none';microphone 'none';camera 'none';magnetometer 'none';gyroscope 'none';fullscreen 'self';payment 'none'";
  add_header Referrer-Policy "no-referrer-when-downgrade";
  add_header Content-Security-Policy "block-all-mixed-content; default-src * data: 'unsafe-inline' 'unsafe-eval'";

  # Set the real IP from the load balancer
  set_real_ip_from 10.0.0.0/16;
  real_ip_header X-Forwarded-For;
  real_ip_recursive on;

  location / {
    try_files $uri $uri/ /index.php?$query_string;
  }

  client_max_body_size 1G;

  location @rewrite {
    rewrite ^/(.*)$ /index.php?q=$1;
  }

  location ~ \.php$ {
    fastcgi_split_path_info ^(.+\.php)(/.+)$;
    fastcgi_param PATH_INFO $fastcgi_path_info;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;

    # When an AWS ALB performs a health check against the Drupal ECS task, it uses the
    # container's IP address for the Host header. If this health check is performed after
    # a cache clear, then it's possible that Drupal will create aggregated CSS/JS or even
    # a cached page that refers to that private IP (e.g., 10.x.y.z) instead of the site
    # domain, rendering assets unusable.
    # Normally, we would use trusted host headers here, but that would cause Drupal to
    # reject the load balancer health check. A failed health check would cause it to be
    # restarted by AWS, putting every container in an infinite loop.
    # As a result, we instead force the value of HTTP_HOST to be the site's domain in all
    # cases. Since the containers do not have public IP addresses, all HTTP Host header
    # checks will be performed by the load balancer, filtering out malicious or
    # misconfigured requests before they reach this point.
    fastcgi_param HTTP_HOST WEBCMS_DOMAIN;

    # Drupal is always behind an HTTPS URL in AWS.
    fastcgi_param HTTPS on;

    # Replace REMOTE_ADDR with the forwarded IP from the load balancer
    fastcgi_param REMOTE_ADDR $realip_remote_addr;

    fastcgi_buffers 16 16k;
    fastcgi_buffer_size 32k;
    fastcgi_intercept_errors on;

    # Unlike docker-compose, in ECS, the Drupal and nginx containers are bound to the same
    # network interface, meaning that they communicate with each other over localhost
    # instead of different hostnames.
    fastcgi_pass localhost:9000;
  }

  location ~ ^/sites/.*/files/(imagecache|styles)/ {
    try_files $uri @rewrite;
  }

  location ~* ^/(s3fs-css|s3fs-js)/(.*) {
    set $s3_base_path 'WEBCMS_S3_DOMAIN/public';
    set $file_path $2;

    # Use the VPC's DNS server for resolution instead of the outside internet
    # cf. https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html#AmazonDNS
    resolver 169.254.169.253 valid=30s;
    resolver_timeout 5s;

    # S3 does *not* like http basic auth
    proxy_set_header Authorization "";

    proxy_pass http://$s3_base_path/$file_path;
  }
}
