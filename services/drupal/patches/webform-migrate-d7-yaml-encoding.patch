diff --git a/src/Plugin/migrate/source/d7/D7Webform.php b/src/Plugin/migrate/source/d7/D7Webform.php
index 7633c98..9fc1159 100644
--- a/src/Plugin/migrate/source/d7/D7Webform.php
+++ b/src/Plugin/migrate/source/d7/D7Webform.php
@@ -182,9 +182,16 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
    * Build form elements from webform component table.
    */
   private function buildFormElements($nid) {
-    // TODO : Use yaml_emit http://php.net/manual/en/function.yaml-emit.php
-    $output = '';
+    // This generates a YAML structure. Useful tip: JSON-encoded strings are
+    // valid YAML keys and values, so we use json_encode() for all keys/values
+    // out of our control. Local variable callables can be called within
+    // double-quoted strings, so we create a few useful ones:
+    $json_encode = 'json_encode';
+    $trim_json_encode = function ($str) {
+      return json_encode(trim($str));
+    };

+    $output = '';
     $query = $this->select('webform_component', 'wc');
     $query->fields('wc', [
       'nid',
@@ -288,7 +295,6 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
       }
       $indent = str_repeat(' ', $element['depth'] * 2);
       $extra = unserialize($element['extra']);
-      $description = $this->cleanString($extra['description']);

       // Create an option list if there are items for this element.
       $options = '';
@@ -301,18 +307,23 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
           if (!empty($item)) {
             if (preg_match('/^<(.*)>$/', $item, $matches)) {
               // Handle option groups.
-              $options .= "$indent    '" . $matches[1] . "':\n";
+              $options .= "$indent    {$json_encode($matches[1])}:\n";
               $ingroup = str_repeat(' ', 2);
             }
             else {
+              // Remove surrounding double quotes on some lines
+              // "foo|bar" -> "foo": "bar"
+              $item = preg_replace('~^"([^"]+)"$~', '$1', $item);
               $option = explode('|', $item);
+              // Trim key & value
+              // foo | bar -> "foo": "bar"
+              $option = array_map('trim', $option);
+
               $valid_options[] = $option[0];
-              if (count($option) == 2) {
-                $options .= "$indent$ingroup    " . $option[0] . ": '" . str_replace('\'', '"', $option[1]) . "'\n";
-              }
-              else {
-                $options .= "$indent$ingroup    " . $option[0] . ": '" . str_replace('\'', '"', $option[0]) . "'\n";
-              }
+              // Encode both key & value
+              $option_key = json_encode($option[0]);
+              $option_value = json_encode(count($option) == 2 ? $option[1] : $option[0]);
+              $options .= "$indent$ingroup    $option_key: $option_value\n";
             }
           }
         }
@@ -353,7 +364,7 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
           elseif (!empty($extra['multiple']) && count($valid_options) == 1) {
             $select_type = 'checkbox';
             list($key, $desc) = explode('|', $extra['items']);
-            $markup .= "$indent  '#description': \"" . $this->cleanString($desc) . "\"\n";
+            $markup .= "$indent  '#description': {$json_encode($desc)}\n";
           }
           else {
             $select_type = 'radios';
@@ -399,7 +410,9 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
           break;

         case 'markup':
-          $markup .= "$indent  '#type': processed_text\n$indent  '#format': full_html\n$indent  '#text': \"" . $this->cleanString($element['value']) . "\"\n";
+          $markup .= "$indent  '#type': processed_text\n";
+          $markup .= "$indent  '#format': full_html\n";
+          $markup .= "$indent  '#text': {$json_encode($element['value'])}\n";
           $element['value'] = '';
           break;

@@ -470,7 +483,7 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
           break;

         case 'pagebreak':
-          $output = str_replace('{' . $current_page . '_title}', $current_page_title, $output);
+          $output = str_replace('{' . $current_page . '_title}', json_encode($current_page_title), $output);
           $current_page = $element['form_key'];
           $markup .= "$indent  '#type': webform_wizard_page\n  '#title': {" . $current_page . "_title}\n";
           $current_page_title = $element['name'];
@@ -504,7 +517,7 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA

       // Add common fields.
       if (!empty(trim($element['value'])) && (empty($valid_options) || in_array($element['value'], $valid_options))) {
-        $markup .= "$indent  '#default_value': '" . str_replace(array('\'', "\n", "\r"), array('"', '\n', ''), trim($element['value'])) . "' \n";
+        $markup .= "$indent  '#default_value': {$trim_json_encode($element['value'])}\n";
       }
       if (!empty($extra['field_prefix'])) {
         $markup .= "$indent  '#field_prefix': " . $extra['field_prefix'] . "\n";
@@ -520,8 +533,8 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
         $markup .= "$indent  '#title_display': " . $title_display . "\n";
       }
       if ($element['type'] != 'pagebreak') {
-        $markup .= "$indent  '#title': '" . str_replace('\'', '"', $element['name']) . "' \n";
-        $markup .= "$indent  '#description': \"" . $description . "\"\n";
+        $markup .= "$indent  '#title': {$json_encode($element['name'])}\n";
+        $markup .= "$indent  '#description': {$json_encode($extra['description'])}\n";
       }
       if (!empty($element['required'])) {
         $markup .= "$indent  '#required': true\n";
@@ -548,7 +561,7 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA

     if ($multiPage) {
       // Replace the final page title.
-      $output = str_replace('{' . $current_page . '_title}', $current_page_title, $output);
+      $output = str_replace('{' . $current_page . '_title}', json_encode($current_page_title), $output);
     }
     return ['elements' => $output, 'xref' => $xref];
   }
@@ -827,13 +840,6 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA
     return $str;
   }

-  /**
-   * {@inheritdoc}
-   */
-  private function cleanString($str) {
-    return str_replace(['"', "\n", "\r"], ["'", '\n', ''], $str);
-  }
-
   /**
    * {@inheritdoc}
    */
@@ -943,14 +949,11 @@ class D7Webform extends DrupalSqlBase implements ImportAwareInterface, RollbackA

   protected function buildItemsString($itemsArray, $baseIndent = '') {
     $preparedItems = array_map(function($item) use ($baseIndent) {
-      return $baseIndent . '  ' . $this->encapsulateString($item[0]) . ': ' . $this->encapsulateString($item[1]);
+      // Callback for json_encode(), which outputs valid YAML strings.
+      $json_encode = 'json_encode';
+      return "$baseIndent  {$json_encode($item[0])}: {$json_encode($item[1])}";
     }, $itemsArray);

     return implode("\n", $preparedItems);
   }
-
-  protected function encapsulateString($string) {
-    return sprintf("'%s'", addslashes($string));
-  }
-
 }
