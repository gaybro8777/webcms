<?php

/**
 * @file
 * Contains epa_wysiwyg.module.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_library_info_alter().
 */
function epa_wysiwyg_library_info_alter(&$libraries, $extension) {
  // Add CKEditor overrides JS file to CKEditor library.
  if ($extension == 'ckeditor' && isset($libraries['drupal.ckeditor'])) {
    $module_path = drupal_get_path('module', 'epa_wysiwyg');
    $js_path = "/$module_path/js/ckeditor-overrides.js";
    $libraries['drupal.ckeditor']['js'][$js_path] = [];
  }
}

/**
 * Implements hook_page_attachments().
 */
function epa_wysiwyg_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'epa_wysiwyg/epa-new';
}

function epa_wysiwyg_pathologic_alter(&$url_params, $parts, $settings) {
  // Do not rewrite links to minio container.  This is necessary because
  // Pathologic does not respect ports when matching host names.
  if (isset($parts['port']) && isset($parts['host']) && $parts['port'] === 8888 && $parts['host'] === 'localhost') {
    $url_params['options']['use_original'] = true;
  }
}

/**
 * Implements hook_theme().
 */
function epa_wysiwyg_theme() {
  return [
    'epa_file_link' => [
      'variables' => ['file' => NULL, 'link_text' => NULL, 'attributes' => []],
    ],
  ];
}

/**
 * Prepares variables for epa file link templates.
 *
 * Default template: epa-file-link.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - file: A File entity to which the link will be created.
 *   - icon_directory: (optional) A path to a directory of icons to be used for
 *     files. Defaults to the value of the "icon.directory" variable.
 *   - description: A description to be displayed instead of the filename.
 *   - attributes: An associative array of attributes to be placed in the a tag.
 */
function template_preprocess_epa_file_link(&$variables) {
  $file = $variables['file'];
  $options = [];

  // @todo Wrap in file_url_transform_relative(). This is currently
  // impossible. As a work-around, we currently add the 'url.site' cache context
  // to ensure different file URLs are generated for different sites in a
  // multisite setup, including HTTP and HTTPS versions of the same site.
  // Fix in https://www.drupal.org/node/2646744.
  $url = $file->createFileUrl(FALSE);
  $variables['#cache']['contexts'][] = 'url.site';

  $mime_type = $file->getMimeType();
  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options['attributes']['type'] = $mime_type . '; length=' . $file->getSize();

  // Classes to add to the file field for icons.
  $classes = [
    'file',
    // Add a specific class for each and every mime type.
    'file--mime-' . strtr($mime_type, ['/' => '-', '.' => '-']),
    // Add a more general class for groups of well known MIME types.
    'file--' . file_icon_class($mime_type),
  ];

  // Set file classes to the options array.
  $variables['attributes'] = new Attribute($variables['attributes']);
  $variables['attributes']->addClass($classes);
  $variables['file_size'] = format_size($file->getSize());
  $variables['url'] = Url::fromUri($url, $options);
  $variables['link'] = Link::fromTextAndUrl($variables['link_text'], $variables['url'])->toRenderable();
}
