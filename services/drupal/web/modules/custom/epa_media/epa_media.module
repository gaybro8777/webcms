<?php

/**
 * @file
 * Contains epa_media.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\file\Entity\File;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\file\FileInterface;
use Drupal\media\MediaInterface;

/**
 * Implements hook_entity_access().
 */
function epa_media_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Prevent private media from being rendered to the screen. This access check
  // also affects files attached to the affected media. Therefore this single
  // access check covers the media view mode output and any direct file views
  // either of the original file or of image style generated files.
  if ($operation == 'view' && $entity->getEntityTypeId() == 'media' && !$account->hasPermission('access private epa_media')) {
    if ($entity->hasField('field_limit_file_accessibility') && !empty($entity->field_limit_file_accessibility->value)) {
      return AccessResult::forbidden();
    }
  }
  return AccessResult::neutral();
}

/**
 * Preprocess function that suppresses broken media for unauthenticated users.
 */
function epa_media_preprocess_media_embed_error(array &$vars) {
  if (!$vars['logged_in']) {
    $vars['#cache']['contexts'][] = 'user.roles:anonymous';
    unset($vars['message']);
    $vars['attributes']['class'] = [];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function epa_media_form_editor_media_dialog_alter(array &$form, FormStateInterface $form_state) {
  // Extract the media UUID that is passed through from the WYSIWYG and use it
  // to load the media entity. Then add a link through to the media edit form
  // in the embedded media modal.
  $editor_object = $form_state->getUserInput()['editor_object'];
  $entity_repository = \Drupal::service('entity.repository');
  $media = $entity_repository->loadEntityByUuid('media', $editor_object['attributes']['data-entity-uuid']);
  $edit_url = Url::fromRoute('entity.media.edit_form', ['media' => $media->id()]);
  $link = Link::fromTextAndUrl('Edit this media item', $edit_url);

  if ($fid = $media->getSource()->getSourceFieldValue($media)){
    $file_url = File::load($fid)->createFileUrl();
    $form['file_url'] = [
      '#markup' => t('<p><strong>File URL:</strong> %file_url</p>', ['%file_url' => $file_url])
    ];
  }

  $form['edit_link'] = $link->toRenderable() + [
    '#attributes' => [
      'target' => '_blank',
    ],
  ];
}

/**
 * Implements hook_media_delete().
 */
function epa_media_media_delete(MediaInterface $media) {
  $source_field_name = $media->getSource()->getConfiguration()['source_field'];
  // Delete the digital file from the system instead just marking it for
  // deletion and waiting for the cron garbage collection task to run.
  if ($media->{$source_field_name}->entity instanceof FileInterface) {
    $file = $media->{$source_field_name}->entity;
    // Make sure that the file was marked as "Temporary" to prevent accidentally
    // removing files that are, somehow, used in multiple places.
    if ($file->isTemporary()) {
      $file->delete();
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function epa_media_form_media_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $media = $form_state->getFormObject()->getEntity();
  // Only proceed if media exists and has the field we care about.
  if ($media->id() && $media->hasField('field_limit_file_accessibility')) {
    $source_field_name = $media->getSource()->getConfiguration()['source_field'];
    if ($media->{$source_field_name}->entity instanceof FileInterface) {
      $scheme = \Drupal::service('stream_wrapper_manager')->getScheme($media->{$source_field_name}->entity->uri->value);
      if ($scheme !== 'private') {
        $form['field_limit_file_accessibility']['#access'] = FALSE;
      }
    }
  }
}
