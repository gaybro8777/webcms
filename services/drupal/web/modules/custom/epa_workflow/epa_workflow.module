<?php

/**
 * @file
 * Contains epa_workflow.module.
 */

use Drupal\content_moderation\Entity\ContentModerationStateInterface;
use Drupal\content_moderation\Form\EntityModerationForm;
use Drupal\content_moderation_notifications\ContentModerationNotificationInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\RevisionLogInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_entity_base_field_info().
 */
function epa_workflow_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  $config_syncing = \Drupal::isConfigSyncing();
  if ($entity_type->id() == 'node' && !$config_syncing) {
    $fields['epa_revision_automated'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Moderation automated'))
      ->setDescription(t('When true current moderation state is automated.'))
      ->setRevisionable(TRUE)
      ->setDefaultValue(NULL);
  }
  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function epa_workflow_content_moderation_state_insert(ContentModerationStateInterface $entity) {
  // Disable hook during migration.
  if (drupal_static('epa_node_migration', FALSE)) {
    return;
  }

  $epa_moderation = \Drupal::service('epa_workflow.moderation_manager');
  if ($epa_moderation->isModeratedEntity($entity)) {
    $epa_moderation->processModeration($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * @see Drupal\group\Entity\GroupContent::postSave
 * @see https://www.drupal.org/project/group/issues/2872697
 * @see https://www.drupal.org/project/drupal/issues/2803717
 */
function epa_workflow_content_moderation_state_update(ContentModerationStateInterface $entity) {
  // Disable hook during migration.
  if (drupal_static('epa_node_migration', FALSE)) {
    return;
  }

  $epa_moderation = \Drupal::service('epa_workflow.moderation_manager');
  // Group will trigger an update after insert.
  // Check to see if entity is moderated.
  // Check to see if content revision id has changed.
  // Also, check that the moderation state isn't looping over itself.
  if ($epa_moderation->isModeratedEntity($entity)
      && $entity->content_entity_revision_id->value != $entity->original->content_entity_revision_id->value
      && $entity->getRevisionId() != $entity->getLoadedRevisionId()
  ) {
    $epa_moderation->processModeration($entity);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @todo This should probably be contributed back.
 */
function epa_workflow_form_content_moderation_notification_form_alter(array &$form, FormStateInterface $form_state) {
  $workflow_id = $form['workflow']['#default_value'];
  $workflow = \Drupal::entityTypeManager()->getStorage('workflow')->load($workflow_id);
  $entity_types = $workflow->getTypePlugin()->getEntityTypes();
  $entity_types[] = 'content_moderation_notifications';
  $form['body']['token_tree_link']['#token_types'] = array_unique(array_merge($form['body']['token_tree_link']['#token_types'], $entity_types));

  $notification = $form_state->getFormObject()->getEntity();
  $workflow_process = $notification->getThirdPartySetting('epa_workflow', 'workflow_process', 'any');
  $workflow_options = [
    'any' => t('Any'),
    'automatic' => t('Automatic'),
    'manual' => t('Manual'),
  ];

  $form['workflow_process'] = [
    '#type' => 'radios',
    '#title' => t('Workflow Process'),
    '#options' => $workflow_options,
    '#description' => t('Notification will react to the selected trigger.'),
    '#default_value' => $workflow_process,
  ];

  $form['#entity_builders']['epa_workflow'] = '_epa_workflow_moderation_form_entity_builder';
}

/**
 * Entity builder for content_moderation_notification_form.
 */
function _epa_workflow_moderation_form_entity_builder($entity_type_id, ContentModerationNotificationInterface $notification, &$form, FormStateInterface &$form_state) {
  $workflow_process = $form_state->getValue('workflow_process', 'any');
  $notification->setThirdPartySetting('epa_workflow', 'workflow_process', $workflow_process);
}

/**
 * Implements hook_mail_alter().
 *
 * Sets header content type to html.
 * Can also achieve by installing mailsystem and add a module specific
 * configuration for content_moderation_notifications.
 *
 * @see https://www.drupal.org/project/content_moderation_notifications/issues/2903550
 */
function epa_workflow_mail_alter(&$message) {
  if ($message['id'] == 'content_moderation_notifications_content_moderation_notification') {
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';

    // Log here to avoid having to create our own mail service
    $logger = \Drupal::logger('epa_workflow');
    $transition = \Drupal::service('content_moderation_notifications.notification_information')->getTransition($message['params']['context']['node']);
    $logger->info('Notification email with subject: %subject was sent to: %to  when the %transition transition was executed on revision %vid', ['%to' => $message['params']['headers']['Bcc'], '%subject' => $message['subject'], '%vid' => $message['params']['context']['node']->getRevisionId(), '%transition' => $transition->label()]);
  }
}

/**
 * Implements hook_content_moderation_notification_mail_data_alter().
 */
function epa_workflow_content_moderation_notification_mail_data_alter(EntityInterface $entity, array &$data) {
  $eic_notifications = [
    'epa_content_has_been_approved',
    'epa_content_needs_review',
    'epa_content_needs_review_manual',
    'epa_content_about_to_expire',
    'epa_content_has_expired',
    'epa_content_will_expire',
  ];
  if (in_array($data['notification']->id, $eic_notifications)) {
    $groups = \Drupal::service('epa_web_areas.web_areas_helper')->getNodeReferencingGroups($entity);
    foreach ($groups as $group) {
      $eic_email = $group->field_editor_in_chief->entity->mail->value;
      if (!in_array($eic_email, $data['to'])) {
        $data['to'][] = $eic_email;
      }

      // Add editors for all notifications except Published needs review.
      if ($data['notification']->id != 'epa_content_needs_review') {
        $members = $group->getMembers('editor');
        foreach ($members as $member) {
          $editor_email = $member->getUser()->getEmail();
          if (!in_array($editor_email, $data['to'])) {
            $data['to'][] = $editor_email;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function epa_workflow_field_formatter_info_alter(array &$info) {
  if (!empty($info['scheduled_publish_generic_formatter'])) {
    $info['scheduled_publish_generic_formatter']['class'] = 'Drupal\epa_workflow\Plugin\Field\FieldFormatter\EPAScheduledPublishGenericFormatter';
  }
}

/**
 * Implements hook_ENTITY_TYPE_revision_create().
 */
function epa_workflow_node_revision_create(EntityInterface $new_revision, EntityInterface $entity, $keep_untranslatable_fields) {
  // Disable hook during migration.
  if (drupal_static('epa_node_migration', FALSE)) {
    return;
  }

  // Remove any schedule field settings from the previous revision.
  if ($new_revision->hasField('field_scheduled_transition')) {
    $new_revision->set('field_scheduled_transition', NULL);
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function epa_workflow_field_widget_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  $plugin_id = $context['widget']->getPluginId();

  if ('moderation_state_default' === $plugin_id && isset($element["state"]["#options"]) && key_exists('draft', $element["state"]["#options"])) {
    $element["state"]["#default_value"] = 'draft';
    $element["#access"] = FALSE;
  }
}


/**
 * Implements hook_form_alter().
 */
function epa_workflow_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'content_moderation_entity_moderation_form') {
    $request = \Drupal::request();
    $route = $request->attributes->get('_route');
    if ($route == 'entity.node.canonical') {
      $form['#submit'] = [
        '_epa_workflow_node_view_moderation_form_submit',
      ];
    }
  }

  if (in_array($form_id,['content_moderation_entity_moderation_form']) || isset($form['node_bulk_form'])) {
    _epa_workflow_add_compliance_checkboxes($form);
  }
}

/**
 * Custom submit handler for the content moderation form when placed on node
 * view pages.
 */
function _epa_workflow_node_view_moderation_form_submit(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $form_state->get('entity');
  /** @var \Drupal\Core\Entity\ContentEntityStorageInterface $storage */
  $storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());

  $entity = $storage->createRevision($entity, $entity->isDefaultRevision());


  $new_state = $form_state->getValue('new_state');

  $entity->set('moderation_state', $new_state);

  if ($entity instanceof RevisionLogInterface) {
    $entity->setRevisionCreationTime(\Drupal::time()->getRequestTime());
    $entity->setRevisionLogMessage($form_state->getValue('revision_log'));
    $entity->setRevisionUserId(\Drupal::currentUser()->id());
  }
  $entity->save();

  \Drupal::messenger()->addStatus(t('The moderation state has been updated.'));

  $form_state->setRedirectUrl($entity->toUrl('canonical'));
}


/**
 * Implements hook_entity_view().
 */
function epa_workflow_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Add the moderation form to the full view mode of a node for authenticated
  // users.
  if ($view_mode === 'full' && $entity->getEntityTypeId() == 'node' && \Drupal::currentUser()->isAuthenticated()) {
    if (isset($entity->in_preview) && $entity->in_preview) {
      return;
    }
    // Only display the interface on the latest and default revisions.
    if (!$entity->isLatestRevision() && !$entity->isDefaultRevision()) {
      return;
    }
    $build['epa_content_moderation_control'] = \Drupal::formBuilder()->getForm(EntityModerationForm::class, $entity);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function epa_workflow_menu_local_tasks_alter(array &$data, $route_name) {
  // Level 0 links are tabs and level 1 are subtabs.
  $override_link_titles = [
    [
      'epa_web_areas.group_content' => 'Content',
      'group.view' => 'Content',
    ],
    [
      'content_moderation.content' => 'Latest Revisions',
      'content_moderation.moderated_content' => FALSE, // Hides the task provided by the content moderation module.
    ],
  ];

  foreach ($override_link_titles as $level => $link_overrides) {
    if (isset($data['tabs'][$level])) {
      foreach ($link_overrides as $link_name => $link_title) {
        if (isset($data['tabs'][$level][$link_name])) {
          if ($link_title === FALSE) {
            unset($data['tabs'][$level][$link_name]);
          }
          else {
            $data['tabs'][$level][$link_name]['#link']['title'] = $link_title;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function epa_workflow_node_presave(NodeInterface $node) {
  if (drupal_static('epa_node_migration', FALSE)) {
    return;
  }

  $storage = \Drupal::entityTypeManager()->getStorage('node');
  $original = $node->original;
  if ($original) {
    $default_revision_id = $original->get('vid')->value;
    $latest_revision_id = $storage->getLatestRevisionId($node->id());
    $loaded_rev_id = $node->getLoadedRevisionId();
    $moderation_state = $node->moderation_state->value;
    $moderation_info = \Drupal::service('content_moderation.moderation_information');
    $workflow = $moderation_info->getWorkflowForEntity($node);
    $workflow_states = $workflow->get('type_settings')['states'];

    // Only leapfrog to reset latest revision if the following is true:
    // - Revision undergoing transition is the default revision AND
    // - there's a different latest revision AND
    // - we are transitioning the current revision to another state that will make
    // it the "default" revision AND
    // - this is not a "syncing" save (a save that is meant to happen more-or-less
    // transparently on a revision just to update field data)
    if (!$node->isSyncing() && isset($workflow_states[$moderation_state]) && $workflow_states[$moderation_state]['default_revision'] && $loaded_rev_id == $default_revision_id && $loaded_rev_id != $latest_revision_id) {
      $node->leapfrog = $latest_revision_id;
    }

    // Set the "last_revision" property to fool the content_moderation_notifications
    // module into properly detecting which transition we are firing since it
    // does not expect us to be transitioning a non-latest revision.
    // So if we're doing a save on the default revision and there's a different
    // latest revision, we need to set the "last_revision" as the current revision.
    if (!$node->isSyncing() && $loaded_rev_id == $default_revision_id && $loaded_rev_id != $latest_revision_id) {
      $node->last_revision = $original;
    }
  }

  // Update the log message for revisions created through bulk operations.
  $request = \Drupal::request();
  $parameters = $request->request->all();
  if (isset($parameters['node_bulk_form'])) {
    $new_state = $node->moderation_state->value;
    $node->setRevisionLogMessage(t('Transitioned to %state as part of a bulk operation.', [
      '%state' => $new_state,
    ]));
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function epa_workflow_node_update(NodeInterface $node) {
  if (isset($node->leapfrog)) {
    // If the revision being saved was the default, but was not the latest, then
    // we have a forward revision and we need to leap frog it to the front so
    // the user doesn't get confused by their "latest revision" disappearing.
    $storage = \Drupal::entityTypeManager()->getStorage('node');
    $last_revision = $storage->loadRevision($node->leapfrog);
    $last_revision->setNewRevision();
    $last_revision->isDefaultRevision(FALSE);
    $last_revision->setRevisionCreationTime(\Drupal::time()->getRequestTime());
    $last_revision->setChangedTime(\Drupal::time()->getRequestTime());
    $last_revision->setRevisionLogMessage(t('Restoring the latest revision (based on revision %vid) after a transition occurred to the current revision.',['%vid' => $node->leapfrog]));
    $last_revision->setSyncing(TRUE);
    $last_revision->save();
  }
}


/**
 * Helper function to add compliance checkboxes to some forms
 * @param $form
 */
function _epa_workflow_add_compliance_checkboxes(&$form) {

  $link_508 = Link::fromTextAndUrl(
    t('applicable Section 508 requirements'),
    Url::fromUri('http://intranet.epa.gov/accessibility/checklist.html')
  );

  $link_508 = $link_508->toString();

  $link_external = Link::fromTextAndUrl(
    t("EPA's External Site Links Procedure"),
    Url::fromUri('https://www.epa.gov/web-policies-and-procedures/procedure-external-site-links')
  );
  $link_external = $link_external->toString();

  // Create a checkbox for 508 compliance agreement
  // $form['workflow_508_compliant'] = [
  $compliance_checkbox = [
    '#type' => 'checkbox',
    '#title' => t('I certify that this page complies with:'),
    '#description' => t('all @508 and @external. ' .
      'This page will be subject to random external site link reviews and Section508 compliance reviews. ' .
      'Non-compliant pages will be unpublished until remediated.', [
      '@508' => $link_508,
      '@external' => $link_external,
    ]),
    '#required' => FALSE,
    '#weight' => -1,
  ];

  // Add validation handler for the checkbox.
  $compliance_checkbox['widget']['#element_validate'] = ['_epa_workflow_form_validation_508'];

  // Ensure a revision comment is not required by default.
  $form['revision_log']['#required'] = FALSE;
  $form['revision_log']['#element_validate'] = ['_epa_workflow_form_validation_revision_log'];

  // Make the element visible when publish is selected on the latest revision.
  if ($form['#form_id'] == 'content_moderation_entity_moderation_form') {
    $compliance_checkbox['#states'] = [
      'visible' => [
        ':input[name="new_state"]' => ['value' => 'published'],
      ],
    ];
    $form['workflow_508_compliant'] = $compliance_checkbox;
    $form['revision_log']['#states'] = [
      'required' => [
        ':input[name="new_state"]' => ['value' => 'published'],
      ],
    ];
  }

  // Make the element visible on VBO edits.
  if (isset($form['node_bulk_form'])) {
    $compliance_checkbox['#states'] = [
      'visible' => [
        ':input[name="action"]' => ['value' => 'set_to_published'],
      ],
    ];
    $form['header']['node_bulk_form']['workflow_508_compliant'] = $compliance_checkbox;
    $form['revision_log']['#states'] = [
      'required' => [
        ':input[name="action"]' => ['value' => 'set_to_published'],
      ],
    ];

    // Update field weights on the bulk update form so the submit button is
    // always at the bottom.
    $form['header']['node_bulk_form']['action']['#weight'] = 0;
    $form['header']['node_bulk_form']['workflow_508_compliant']['#weight'] = 1;
    $form['header']['node_bulk_form']['actions']['#weight'] = 1000;
  }

}


/**
 * Validation for compliance 508 checkbox.  Must require
 * the checkboxes be ticked when moving content to published.
 */
function _epa_workflow_form_validation_508($element, FormStateInterface $form_state, $form) {
  // Block form on latest revision
  if ($form['#form_id'] == 'content_moderation_entity_moderation_form') {
    $op = $form_state->getValue('new_state');
  }

  // VBO form on content dashboard
  if (isset($form['node_bulk_form'])) {
    $op = $form_state->getValue('action');
  }

  if ($op == 'Publish' || $op == 'published' || $op == 'set_to_published')  {
    if (empty($form_state->getValue('workflow_508_compliant'))) {
      $form_state->setError($element, t('508 compliance is required to Publish content.'));
    }
  }
}

/**
 * Validation for revision log.  Must require
 * a revision log when moving content to published.
 */
function _epa_workflow_form_validation_revision_log($element, FormStateInterface $form_state, $form) {
  // Block form on latest revision
  if ($form['#form_id'] == 'content_moderation_entity_moderation_form') {
    $op = $form_state->getValue('new_state');
  }

  if (isset($op) && in_array($op, ['Publish','published','set_to_published']))  {
    if (empty($form_state->getValue('revision_log'))) {
      $form_state->setError($element, t('Revision log required when publishing content.'));
    }
  }
}
